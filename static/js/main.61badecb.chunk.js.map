{"version":3,"sources":["Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/StatisticCounter/StatisticCounter.jsx","Components/Section/Section.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","positivePercentage","FeedbackOptions","onLeaveFeedback","onClick","StatisticCounter","state","event","currValue","target","outerText","setState","prevState","countTotalFeedback","countFeedbackPercentage","Math","ceil","this","total","Component","Section","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAmBeA,EAjBI,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,mBACtC,OAAO,gCACH,4CACA,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KACR,qDAAwBC,SCGjBC,G,MATS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACvB,OAAO,gCACH,uDACA,wBAAQC,QAASD,EAAjB,kBACA,wBAAQC,QAASD,EAAjB,qBACA,wBAAQC,QAASD,EAAjB,sBC+DOE,E,4MAhEXC,MAAQ,CACJR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTG,gBAAkB,SAAAI,GAClB,IAAMC,EAAYD,EAAME,OAAOC,UAEf,SAAZF,EAMY,YAAZA,EAMY,QAAZA,GACF,EAAKG,UAAS,SAAAC,GAAS,MAAK,CAC1BZ,IAAKY,EAAUZ,IAAM,MAPvB,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAC1Bb,QAASa,EAAUb,QAAU,MAP/B,EAAKY,UAAS,SAAAC,GAAS,MAAK,CAC1Bd,KAAMc,EAAUd,KAAO,O,EAkB3Be,mBAAqB,WAEjB,OADc,EAAKP,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,K,EAIpEc,wBAA0B,WAEtB,OADmBC,KAAKC,KAAwB,IAAlB,EAAKV,MAAMR,KAAc,EAAKe,uB,4CAIhE,WACI,MAA+BI,KAAKX,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACI,qCACI,cAAC,EAAD,CACIG,gBAAiBc,KAAKd,kBAErBc,KAAKX,MAAMR,KAAO,GACnBmB,KAAKX,MAAMP,QAAU,GACrBkB,KAAKX,MAAMN,IAAM,EACb,cAAC,EAAD,CACIF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLkB,MAAOD,KAAKJ,qBACZZ,mBAAoBgB,KAAKH,4BAG7B,yD,GA1DOK,aCKhBC,G,MANC,WACZ,OAAO,kCACH,cAAC,EAAD,QCMOC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.61badecb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, positivePercentage }) => {\r\n    return <div>\r\n        <h2>Statistics</h2>\r\n        <p>Good:{good}</p>\r\n        <p>Neutral:{neutral}</p>\r\n        <p>Bad:{bad}</p>\r\n        <p>Positive percentage:{positivePercentage}</p>\r\n    </div>\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n}\r\n\r\nexport default Statistics","import './FeedbackOptions.scss'\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n    return <div>\r\n        <h2>Please leave feedback</h2>\r\n        <button onClick={onLeaveFeedback}>Good</button>\r\n        <button onClick={onLeaveFeedback}>Neutral</button>\r\n        <button onClick={onLeaveFeedback}>Bad</button>\r\n    </div>\r\n}\r\n\r\nexport default FeedbackOptions","import { Component } from \"react\";\r\n\r\nimport Statistics from \"../Statistics\";\r\nimport FeedbackOptions from \"../FeedbackOptions\";\r\n\r\nclass StatisticCounter extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n\r\n    onLeaveFeedback = event => {\r\n    const currValue = event.target.outerText;\r\n    \r\n    if (currValue===\"Good\") {\r\n      this.setState(prevState => ({\r\n        good: prevState.good + 1,\r\n      }));\r\n      return;\r\n    }\r\n    if (currValue===\"Neutral\") {\r\n      this.setState(prevState => ({\r\n        neutral: prevState.neutral + 1,\r\n      }));\r\n      return;\r\n    }\r\n    if (currValue===\"Bad\") {\r\n      this.setState(prevState => ({\r\n        bad: prevState.bad + 1,\r\n      }));\r\n      return;\r\n    }\r\n  };\r\n    \r\n    countTotalFeedback = () => {\r\n        const total = this.state.good + this.state.neutral + this.state.bad;\r\n        return total;\r\n    };\r\n\r\n    countFeedbackPercentage = () => {\r\n        const percentage = Math.ceil((this.state.good * 100) / this.countTotalFeedback());\r\n        return percentage;\r\n    };\r\n\r\n    render() {\r\n        const { good, neutral, bad } = this.state;\r\n        return (\r\n            <>\r\n                <FeedbackOptions\r\n                    onLeaveFeedback={this.onLeaveFeedback}\r\n                />\r\n                    {this.state.good > 0 ||\r\n                    this.state.neutral > 0 ||\r\n                    this.state.bad > 0 ? (\r\n                        <Statistics\r\n                            good={good}\r\n                            neutral={neutral}\r\n                            bad={bad}\r\n                            total={this.countTotalFeedback()}\r\n                            positivePercentage={this.countFeedbackPercentage()}\r\n                        ></Statistics>\r\n                    ) : (\r\n                        <p>No feedback given</p>\r\n                    )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StatisticCounter","import StatisticCounter from \"../StatisticCounter\"\r\n\r\nimport './Section.scss'\r\n\r\nconst Section = () => {\r\n    return <section>\r\n        <StatisticCounter />\r\n    </section>\r\n}\r\n\r\nexport default Section","import \"./App.css\";\n\nimport Section from \"./Components/Section\";\n\nfunction App() {\n  return (\n    <>\n      <Section />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}